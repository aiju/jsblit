int INTKEY = 1;
int INTMOUSE = 2;
int INTUART = 4;
int INTVBL = 8;
int ACIATXMASK = 0x60;
int ACIATXIRQ = 0x20;
int ACIARXIRQ = 0x80;

irql[1] = INTVBL;
irql[2] = INTKEY;
irql[4] = INTMOUSE;
irql[5] = INTUART;

int ram[];
int rom[];
int mousex, mousey, mousebut;
bool mousex0 = true, mousey0 = true;
int keybuf, uartrxbuf, uarttxbuf;
int kbdctrl, uartctrl;
int daddr, dstat;
int invert;
string keychan;
string uartrxchan;

ram = new Uint16Array(128*1024);
rom = new Uint16Array(3*4096);
mousex = 0;
mousey = 0;
mousebut = 0;
keybuf = -1;
uartrxbuf = -1;
uarttxbuf = -1;
kbdctrl = 0;
uartctrl = 0;
daddr = 0;
dstat = 0;
invert = 0;
keychan = "";
uartrxchan = "";

int upx1, upx2, upy1, upy2;

void
meminit(void)
{
	int i;
	
	for(i = 0; i < romstr.length / 2; i++)
		rom[i] = romstr.charCodeAt(2 * i) << 8 | romstr.charCodeAt(2 * i + 1);
}
meminit();

int
memread(int a)
{
	int rc;

	a &= 0x3fffff;
	if(a < 8) a += 0x40000;
	if(a < 0x40000) return ram[a>>1];
	if(a >= 0x40000 && a < 0x40000 + 3*8192)
		return rom[a - 0x40000 >> 1];
	switch(a & ~1){
	case 01400000:
		if(mousey0){
			mousey0 = false;
			return 0;
		}
		return mousey;
	case 01400002:
		if(mousex0){
			mousex0 = false;
			return 0;
		}
		return mousex;
	case 01400010: /* uart status */
		rc = 0;
		if(uartrxbuf >= 0) rc |= 1;
		if(uarttxbuf < 0) rc |= 2;
		return (rc | rc << 8) & 0xffff;
	case 01400012: /* uart data */
		rc = uartrxbuf;
		uartrxbuf = -1;
		return (rc | rc << 8) & 0xffff;
	case 01400020:
	case 01400024:
		irq &= ~INTMOUSE;
		return (mousebut | mousebut << 8) & 0xffff;
	case 01400026:
		return 0; /* mouse: unknown purpose */
	case 01400030:
		return daddr >> 2 & 0xffff; /* display address */
	case 01400040:
		return dstat; /* display status */
	case 01400060: /* keyboard status */
		rc = 2;
		if(keybuf >= 0) rc |= 1;
		return (rc | rc << 8) & 0xffff;
	case 01400062: /* keyboard data */
		rc = keybuf;
		keybuf = -1;
		return (rc | rc << 8) & 0xffff;
	}
	console.log("read 0" + O(a,6) + " (curpc = 0x" + X(curpc,8) + ")");
	return 0;
}

void
memwrite(int a, int v, int m)
{
	int x, y;

//	if((a&~1) == 0x3ffd8) console.log("write 0" + O(a,6) + " = 0x" + X(v,4) + " (mask = 0x" + X(m,4) + ", curpc = 0x" + X(curpc,8) + ")");
	a &= 0x3fffff;
	v &= 0xffff;
	if(a < 0x40000){
		if(a >= daddr){
			y = Math.floor((a - daddr) / 100);
			x = (((a & ~1) - daddr) % 100) * 8;
			if(upx1 > x) upx1 = x;
			if(upx2 < x+16) upx2 = x+16;
			if(upy1 > y) upy1 = y;
			if(upy2 <= y) upy2 = y;
		}
		ram[a>>1] = ram[a>>1] & ~m | v & m;
		return;
	}
	switch(a & ~1){
	case 01400010: uartctrl = v; return;
	case 01400012: uarttxbuf = v & 0xff; return;
	case 01400024: return; /* mouse: purpose unknown */
	case 01400026: return; /* mouse: purpose unknown */
	case 01400030:
		daddr = (daddr >> 2 & ~m | v & m) << 2;
		upx1 = 0;
		upy1 = 0;
		upx2 = SX;
		upy2 = SY;
		return;
	case 01400040:
		dstat = dstat & ~m | v & m;
		invert = -(dstat & 1);
		upx1 = 0;
		upy1 = 0;
		upx2 = SX;
		upy2 = SY;
		return;
	case 01400056: /* sound: exact function unknown */ return;
	case 01400060: kbdctrl = v; return;
	case 01400062: /* reset keyboard */ return;
	case 01400070: irq &= ~INTVBL; return;
	case 01400156: /* sound: exact function unknown */ return;
	}
	console.log("write 0" + O(a,6) + " = 0x" + X(v,4) + " (mask = 0x" + X(m,4) + ", curpc = 0x" + X(curpc,8) + ")");
}

void
keycheck(void)
{
	if(keybuf < 0 && keychan != ""){
		keybuf = keychan.charCodeAt(0);
		keychan = keychan.substr(1);
	}
	if(keybuf >= 0 && (kbdctrl & ACIARXIRQ) != 0)
		irq |= INTKEY;
	else
		irq &= ~INTKEY;
	if(uartrxbuf < 0 && uartrxctr <= 0 && uartrxchan != ""){
		uartrxbuf = uartrxchan.charCodeAt(0);
		uartrxchan = uartrxchan.substr(1);
		uartrxctr += FREQ * 11 / BAUD;
	}
	if(uarttxbuf >= 0){
		telnettx(String.fromCharCode(uarttxbuf));
		uarttxbuf = -1;
	}
	if(uartrxbuf >= 0 && (uartctrl & ACIARXIRQ) != 0 || uarttxbuf < 0 && (uartctrl & ACIATXMASK) == ACIATXIRQ)
		irq |= INTUART;
	else
		irq &= ~INTUART;
}

int
intack(int l)
{
	return 24 + l;
}
